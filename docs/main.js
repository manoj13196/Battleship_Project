(()=>{"use strict";var e={56:(e,r,n)=>{e.exports=function(e){var r=n.nc;r&&e.setAttribute("nonce",r)}},72:e=>{var r=[];function n(e){for(var n=-1,t=0;t<r.length;t++)if(r[t].identifier===e){n=t;break}return n}function t(e,t){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],l=t.base?c[0]+t.base:c[0],u=a[l]||0,p="".concat(l," ").concat(u);a[l]=u+1;var d=n(p),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)r[d].references++,r[d].updater(A);else{var h=o(A,t);t.byIndex=s,r.splice(s,0,{identifier:p,updater:h,references:1})}i.push(p)}return i}function o(e,r){var n=r.domAPI(r);return n.update(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap&&r.supports===e.supports&&r.layer===e.layer)return;n.update(e=r)}else n.remove()}}e.exports=function(e,o){var a=t(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=n(a[i]);r[s].references--}for(var c=t(e,o),l=0;l<a.length;l++){var u=n(a[l]);0===r[u].references&&(r[u].updater(),r.splice(u,1))}a=c}}},113:e=>{e.exports=function(e,r){if(r.styleSheet)r.styleSheet.cssText=e;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(e))}}},314:e=>{e.exports=function(e){var r=[];return r.toString=function(){return this.map((function(r){var n="",t=void 0!==r[5];return r[4]&&(n+="@supports (".concat(r[4],") {")),r[2]&&(n+="@media ".concat(r[2]," {")),t&&(n+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),n+=e(r),t&&(n+="}"),r[2]&&(n+="}"),r[4]&&(n+="}"),n})).join("")},r.i=function(e,n,t,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);t&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),r.push(u))}},r}},354:e=>{e.exports=function(e){var r=e[1],n=e[3];if(!n)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */");return[r].concat([a]).join("\n")}return[r].join("\n")}},540:e=>{e.exports=function(e){var r=document.createElement("style");return e.setAttributes(r,e.attributes),e.insert(r,e.options),r}},659:e=>{var r={};e.exports=function(e,n){var t=function(e){if(void 0===r[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}r[e]=n}return r[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var r=e.insertStyleElement(e);return{update:function(n){!function(e,r,n){var t="";n.supports&&(t+="@supports (".concat(n.supports,") {")),n.media&&(t+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(t+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),t+=n.css,o&&(t+="}"),n.media&&(t+="}"),n.supports&&(t+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),r.styleTagTransform(t,e,r.options)}(r,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)}}}},967:(e,r,n)=>{n.d(r,{A:()=>s});var t=n(354),o=n.n(t),a=n(314),i=n.n(a)()(o());i.push([e.id,"/* General Styles */\nbody {\n  font-family: Arial, sans-serif;\n  text-align: center;\n  background-color: #1a1a2e;\n  color: #ffffff;\n  margin: 0;\n  padding: 0;\n}\n\n/* Header */\nheader {\n  background: #16213e;\n  padding: 1rem;\n  font-size: 1.5rem;\n}\n\n/* Main Layout */\n.boards-container {\n  display: flex;\n  justify-content: center;\n  gap: 2rem;\n  margin-top: 20px;\n}\n\n.board-section h2 {\n  margin-bottom: 10px;\n}\n\n/* Game Boards */\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 30px);\n  grid-template-rows: repeat(10, 30px);\n  gap: 2px;\n  background-color: #0f3460;\n  padding: 5px;\n}\n\n.cell {\n  width: 30px;\n  height: 30px;\n  border: 1px solid #576574;\n  position: relative;\n  cursor: pointer;\n  /* Remove any transitions or animations */\n  transition: none;\n}\n\n/* Make ship cells visible */\n.cell.ship {\n  background-color: #3a3a3a; /* Gray for ships */\n  border: 1px solid #ffffff;\n}\n\n/* Make hit cells visible */\n.cell.hit {\n  background-color: red; /* Red color for hits on ships */\n  border: 2px solid #ff0000;\n}\n\n/* Make miss cells visible */\n.cell.miss {\n  background-color: blue; /* Blue color for misses */\n  border: 2px solid #0000ff;\n}\n\n.cell.ship.hit {\n  background-color: orange; /* Highlight hit ship cells */\n}\n\n.cell.hidden {\n  background-color: #c0c0c0;\n}\n\n/* Controls */\n.controls {\n  margin-top: 20px;\n}\n\nbutton {\n  background-color: #ff4757;\n  color: white;\n  border: none;\n  padding: 10px 15px;\n  margin: 5px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n}\n\nbutton:hover {\n  background-color: #e84118;\n}\n\n/* Disable buttons when they are disabled */\nbutton:disabled {\n  background-color: #888888;\n  cursor: not-allowed;\n}\n\nbutton#restart-game {\n  background-color: #4caf50; /* Green color for restart button */\n  color: white;\n  border: none;\n  padding: 10px 15px;\n  margin: 5px;\n  font-size: 1rem;\n  cursor: pointer;\n  border-radius: 5px;\n}\n\nbutton#restart-game:hover {\n  background-color: #45a049;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .boards-container {\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .board {\n    grid-template-columns: repeat(10, 25px);\n    grid-template-rows: repeat(10, 25px);\n  }\n}\n","",{version:3,sources:["webpack://./styles/styles.css"],names:[],mappings:"AAAA,mBAAmB;AACnB;EACE,8BAA8B;EAC9B,kBAAkB;EAClB,yBAAyB;EACzB,cAAc;EACd,SAAS;EACT,UAAU;AACZ;;AAEA,WAAW;AACX;EACE,mBAAmB;EACnB,aAAa;EACb,iBAAiB;AACnB;;AAEA,gBAAgB;AAChB;EACE,aAAa;EACb,uBAAuB;EACvB,SAAS;EACT,gBAAgB;AAClB;;AAEA;EACE,mBAAmB;AACrB;;AAEA,gBAAgB;AAChB;EACE,aAAa;EACb,uCAAuC;EACvC,oCAAoC;EACpC,QAAQ;EACR,yBAAyB;EACzB,YAAY;AACd;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,yBAAyB;EACzB,kBAAkB;EAClB,eAAe;EACf,yCAAyC;EACzC,gBAAgB;AAClB;;AAEA,4BAA4B;AAC5B;EACE,yBAAyB,EAAE,mBAAmB;EAC9C,yBAAyB;AAC3B;;AAEA,2BAA2B;AAC3B;EACE,qBAAqB,EAAE,gCAAgC;EACvD,yBAAyB;AAC3B;;AAEA,4BAA4B;AAC5B;EACE,sBAAsB,EAAE,0BAA0B;EAClD,yBAAyB;AAC3B;;AAEA;EACE,wBAAwB,EAAE,6BAA6B;AACzD;;AAEA;EACE,yBAAyB;AAC3B;;AAEA,aAAa;AACb;EACE,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,WAAW;EACX,eAAe;EACf,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA,2CAA2C;AAC3C;EACE,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,yBAAyB,EAAE,mCAAmC;EAC9D,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,WAAW;EACX,eAAe;EACf,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA,sBAAsB;AACtB;EACE;IACE,sBAAsB;IACtB,mBAAmB;EACrB;;EAEA;IACE,uCAAuC;IACvC,oCAAoC;EACtC;AACF",sourcesContent:["/* General Styles */\r\nbody {\r\n  font-family: Arial, sans-serif;\r\n  text-align: center;\r\n  background-color: #1a1a2e;\r\n  color: #ffffff;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n/* Header */\r\nheader {\r\n  background: #16213e;\r\n  padding: 1rem;\r\n  font-size: 1.5rem;\r\n}\r\n\r\n/* Main Layout */\r\n.boards-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 2rem;\r\n  margin-top: 20px;\r\n}\r\n\r\n.board-section h2 {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n/* Game Boards */\r\n.board {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 30px);\r\n  grid-template-rows: repeat(10, 30px);\r\n  gap: 2px;\r\n  background-color: #0f3460;\r\n  padding: 5px;\r\n}\r\n\r\n.cell {\r\n  width: 30px;\r\n  height: 30px;\r\n  border: 1px solid #576574;\r\n  position: relative;\r\n  cursor: pointer;\r\n  /* Remove any transitions or animations */\r\n  transition: none;\r\n}\r\n\r\n/* Make ship cells visible */\r\n.cell.ship {\r\n  background-color: #3a3a3a; /* Gray for ships */\r\n  border: 1px solid #ffffff;\r\n}\r\n\r\n/* Make hit cells visible */\r\n.cell.hit {\r\n  background-color: red; /* Red color for hits on ships */\r\n  border: 2px solid #ff0000;\r\n}\r\n\r\n/* Make miss cells visible */\r\n.cell.miss {\r\n  background-color: blue; /* Blue color for misses */\r\n  border: 2px solid #0000ff;\r\n}\r\n\r\n.cell.ship.hit {\r\n  background-color: orange; /* Highlight hit ship cells */\r\n}\r\n\r\n.cell.hidden {\r\n  background-color: #c0c0c0;\r\n}\r\n\r\n/* Controls */\r\n.controls {\r\n  margin-top: 20px;\r\n}\r\n\r\nbutton {\r\n  background-color: #ff4757;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 15px;\r\n  margin: 5px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #e84118;\r\n}\r\n\r\n/* Disable buttons when they are disabled */\r\nbutton:disabled {\r\n  background-color: #888888;\r\n  cursor: not-allowed;\r\n}\r\n\r\nbutton#restart-game {\r\n  background-color: #4caf50; /* Green color for restart button */\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 15px;\r\n  margin: 5px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n}\r\n\r\nbutton#restart-game:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n/* Responsive Design */\r\n@media (max-width: 768px) {\r\n  .boards-container {\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n\r\n  .board {\r\n    grid-template-columns: repeat(10, 25px);\r\n    grid-template-rows: repeat(10, 25px);\r\n  }\r\n}\r\n"],sourceRoot:""}]);const s=i}},r={};function n(t){var o=r[t];if(void 0!==o)return o.exports;var a=r[t]={id:t,exports:{}};return e[t](a,a.exports,n),a.exports}n.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return n.d(r,{a:r}),r},n.d=(e,r)=>{for(var t in r)n.o(r,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},n.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),n.nc=void 0;var t=n(72),o=n.n(t),a=n(825),i=n.n(a),s=n(659),c=n.n(s),l=n(56),u=n.n(l),p=n(540),d=n.n(p),A=n(113),h=n.n(A),f=n(967),m={};function y(e){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},y(e)}function v(e,r){for(var n=0;n<r.length;n++){var t=r[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,b(t.key),t)}}function b(e){var r=function(e){if("object"!=y(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=y(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==y(r)?r:r+""}m.styleTagTransform=h(),m.setAttributes=u(),m.insert=c().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=d(),o()(f.A,m),f.A&&f.A.locals&&f.A.locals;var g=function(){return e=function e(){!function(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}(this,e),this.board=[],this.ships=[],this.createBoard()},(r=[{key:"createBoard",value:function(){for(var e=0;e<10;e++){for(var r=[],n=0;n<10;n++)r.push({ship:null,hit:!1});this.board.push(r)}}},{key:"placeShip",value:function(e,r,n,t){var o=e.length;if(t){if(n+o>10)return!1;for(var a=0;a<o;a++)if(this.board[n+a][r].ship)return!1;for(var i=0;i<o;i++)this.board[n+i][r].ship=e}else{if(r+o>10)return!1;for(var s=0;s<o;s++)if(this.board[n][r+s].ship)return!1;for(var c=0;c<o;c++)this.board[n][r+c].ship=e}return this.ships.push(e),!0}},{key:"receiveAttack",value:function(e,r){var n=this.board[e][r];return!n.hit&&(n.hit=!0,n.ship?(n.ship.hit(),"hit"):"miss")}},{key:"allShipsSunk",value:function(){return this.ships.every((function(e){return e.isSunk()}))}}])&&v(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,r}();function B(e){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},B(e)}function C(e,r){for(var n=0;n<r.length;n++){var t=r[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,E(t.key),t)}}function E(e){var r=function(e){if("object"!=B(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=B(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==B(r)?r:r+""}var k=function(){return e=function e(r){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];!function(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=r,this.isAI=n,this.attacksMade=new Set},(r=[{key:"attack",value:function(e,r,n){return!this.attacksMade.has("".concat(r,",").concat(n))&&(this.attacksMade.add("".concat(r,",").concat(n)),e.receiveAttack(r,n))}},{key:"aiAttack",value:function(e){var r,n,t=0;do{if(r=Math.floor(10*Math.random()),n=Math.floor(10*Math.random()),++t>100)return console.error("AI has no valid moves left!"),!1}while(this.attacksMade.has("".concat(r,",").concat(n)));return this.attacksMade.add("".concat(r,",").concat(n)),e.receiveAttack(r,n)}}])&&C(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,r}();function S(e){var r=0;return{length:e,hits:r,hit:function(){r<e&&r++},isSunk:function(){return r===e}}}function x(e){return x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},x(e)}function w(e,r){return function(e){if(Array.isArray(e))return e}(e)||function(e,r){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var t,o,a,i,s=[],c=!0,l=!1;try{if(a=(n=n.call(e)).next,0===r){if(Object(n)!==n)return;c=!1}else for(;!(c=(t=a.call(n)).done)&&(s.push(t.value),s.length!==r);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(l)throw o}}return s}}(e,r)||function(e,r){if(e){if("string"==typeof e)return T(e,r);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?T(e,r):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function T(e,r){(null==r||r>e.length)&&(r=e.length);for(var n=0,t=Array(r);n<r;n++)t[n]=e[n];return t}function M(e,r){for(var n=0;n<r.length;n++){var t=r[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,G(t.key),t)}}function G(e){var r=function(e){if("object"!=x(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=x(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==x(r)?r:r+""}var P=function(){return e=function e(){!function(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}(this,e),this.isGameStarted=!1,this.isPlayerTurn=!0,this.playerBoard=new g,this.computerBoard=new g,this.player=new k(this.playerBoard),this.computer=new k(this.computerBoard),this.shipTypes=["Carrier","Battleship","Cruiser","Submarine","Destroyer"],this.shipLengths={Carrier:5,Battleship:4,Cruiser:3,Submarine:3,Destroyer:2},this.currentShipType=this.shipTypes[0],this.isVertical=!0,this.placedShipsCount=0,this.computerTargetQueue=[]},(r=[{key:"getShipLength",value:function(e){return this.shipLengths[e]}},{key:"startGame",value:function(){this.placedShipsCount<this.shipTypes.length?console.log("Place all ships before starting the game!"):(this.isGameStarted=!0,this.isPlayerTurn=!0,this.placeComputerShips(),console.log("Game started!"))}},{key:"placeComputerShips",value:function(){var e=this;this.shipTypes.forEach((function(r){for(var n=!1;!n;){var t=Math.floor(10*Math.random()),o=Math.floor(10*Math.random()),a=Math.random()<.5,i=new S(e.getShipLength(r));n=e.computerBoard.placeShip(i,t,o,a)}}))}},{key:"placeShip",value:function(e,r){var n=new S(this.getShipLength(this.currentShipType)),t=this.playerBoard.placeShip(n,e,r,this.isVertical);return t?(console.log("Placed ".concat(this.currentShipType," at (").concat(e,", ").concat(r,")")),this.placedShipsCount++,this.moveToNextShip()):console.log("Failed to place ".concat(this.currentShipType," at (").concat(e,", ").concat(r,")")),t}},{key:"moveShip",value:function(e,r){}},{key:"rotateShip",value:function(){this.isVertical=!this.isVertical}},{key:"moveToNextShip",value:function(){var e=this.shipTypes.indexOf(this.currentShipType);e<this.shipTypes.length-1?this.currentShipType=this.shipTypes[e+1]:this.placedShipsCount===this.shipTypes.length&&console.log("All ships placed. Ready to start the game.")}},{key:"attackComputer",value:function(e,r){var n=this;if(!this.isPlayerTurn||!this.isGameStarted)return!1;if(this.computerBoard.board[r][e].hit)return console.log("You already attacked this cell!"),!1;var t=this.computerBoard.receiveAttack(r,e);return"hit"===t?(console.log("You hit a ship!"),this.checkForWinner(),t):("miss"===t&&(console.log("You missed!"),this.isPlayerTurn=!1,this.checkForWinner(),this.isGameStarted&&setTimeout((function(){return n.computerTurn()}),500)),t)}},{key:"computerTurn",value:function(){var e=this;if(!this.isPlayerTurn&&this.isGameStarted){for(var r,n,t;this.computerTargetQueue.length>0;){var o=w(this.computerTargetQueue.shift(),2);if(r=o[0],n=o[1],!this.playerBoard.board[n][r].hit){t=this.playerBoard.receiveAttack(n,r);break}}if(!t){var a=0;do{if(r=Math.floor(10*Math.random()),n=Math.floor(10*Math.random()),++a>100)return void console.error("Computer has no valid moves left!")}while(this.playerBoard.board[n][r].hit);t=this.playerBoard.receiveAttack(n,r)}"hit"===t?(console.log("Computer hit your ship at (".concat(r,", ").concat(n,")!")),this.addAdjacentCellsToQueue(r,n),this.checkForWinner(),setTimeout((function(){return e.computerTurn()}),500)):"miss"===t&&(console.log("Computer missed at (".concat(r,", ").concat(n,").")),this.isPlayerTurn=!0,this.checkForWinner()),document.dispatchEvent(new Event("updateBoards"))}}},{key:"addAdjacentCellsToQueue",value:function(e,r){var n=this;[[0,1],[1,0],[0,-1],[-1,0]].forEach((function(t){var o=w(t,2),a=o[0],i=o[1],s=e+a,c=r+i;s>=0&&s<10&&c>=0&&c<10&&!n.playerBoard.board[c][s].hit&&!n.computerTargetQueue.some((function(e){var r=w(e,2),n=r[0],t=r[1];return n===s&&t===c}))&&n.computerTargetQueue.push([s,c])}))}},{key:"checkForWinner",value:function(){this.computerBoard.allShipsSunk()?(console.log("Player wins!"),this.endGame("Player")):this.playerBoard.allShipsSunk()&&(console.log("Computer wins!"),this.endGame("Computer"))}},{key:"endGame",value:function(e){this.isGameStarted=!1,document.getElementById("game-info").textContent="Game Over! ".concat(e," wins!"),document.getElementById("restart-game").style.display="inline-block"}},{key:"resetGame",value:function(){this.isGameStarted=!1,this.isPlayerTurn=!0,this.playerBoard=new g,this.computerBoard=new g,this.player=new k(this.playerBoard),this.computer=new k(this.computerBoard),this.currentShipType=this.shipTypes[0],this.placedShipsCount=0,console.log("Game has been reset.")}}])&&M(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,r}();document.addEventListener("DOMContentLoaded",(function(){var e=new P,r=function(e){var r=document.getElementById("player-board"),n=document.getElementById("computer-board"),t=document.getElementById("game-info"),o=document.getElementById("start-game"),a=document.getElementById("rotate-ship");function i(){s(e.playerBoard,r,!1),s(e.computerBoard,n,!0)}function s(r,n,t){n.innerHTML="";for(var o=function(o){for(var a=function(a){var s=document.createElement("div");s.classList.add("cell"),s.dataset.row=o,s.dataset.col=a;var l=r.board[o][a];l.hit&&s.classList.add(l.ship?"hit":"miss"),l.ship&&!t&&s.classList.add("ship"),e.isGameStarted||t||s.addEventListener("click",(function(){e.placeShip(a,o)||alert("Invalid placement! Try again."),i()})),e.isGameStarted&&t&&(e.isPlayerTurn?s.addEventListener("click",(function(){l.hit?alert("You already attacked this cell!"):e.attackComputer(a,o)&&(i(),c())})):s.style.pointerEvents="none"),n.appendChild(s)},s=0;s<10;s++)a(s)},a=0;a<10;a++)o(a)}function c(){e.isGameStarted&&(t.textContent=e.isPlayerTurn?"Your turn! Click on the computer's board.":"Computer's turn! Please wait...")}return document.addEventListener("updateBoards",(function(){i(),c()})),o.addEventListener("click",(function(){e.placedShipsCount<e.shipTypes.length?alert("Place all ships before starting the game!"):(e.startGame(),i(),c(),o.disabled=!0,a.disabled=!0)})),document.getElementById("restart-game").addEventListener("click",(function(){e.resetGame(),i(),c(),document.getElementById("game-info").textContent="Place your ships or adjust their positions",document.getElementById("restart-game").style.display="none",o.disabled=!1,a.disabled=!1})),{renderBoards:i,updateGameInfo:c}}(e);r.renderBoards(),document.getElementById("rotate-ship").addEventListener("click",(function(){e.rotateShip(),alert("Ship orientation: ".concat(e.isVertical?"Vertical":"Horizontal"))})),document.getElementById("start-game").addEventListener("click",(function(){e.isGameStarted||(e.startGame(),r.updateGameInfo())}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,